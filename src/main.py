import pandas as pd
import re
from embedder import embed_dataframe, tokenize_text, embed_text
from qdrant_client_utils import init_qdrant_client, recreate_collection, insert_data, search
from openai_utils import clarify_question, choose_best_match
from config import QDRANT_TOP_K

# Load d·ªØ li·ªáu
df = pd.read_excel("data/B·ªò 250 C√ÇU H·ªéI C·ª¶A SINH VI√äN V·ªÄ TR∆Ø·ªúNG ƒê·∫†I H·ªåC C√îNG TH∆Ø∆†NG TP.HCM.xlsx", header=1)
df = df.iloc[:, :3].drop(columns=["STT"])
df["STT"] = range(1, len(df) + 1)

# Embedding
df = embed_dataframe(df)

# Qdrant
client = init_qdrant_client()
recreate_collection(client)
count = insert_data(client, df)
print(f"‚úÖ ƒê√£ l∆∞u {count} c√¢u h·ªèi v√†o Qdrant.")

# Truy v·∫•n ng∆∞·ªùi d√πng
query_text = input("Nh·∫≠p c√¢u h·ªèi: ")
clarified = clarify_question(query_text)
print(f"\nüß† C√¢u h·ªèi sau khi l√†m r√µ: {clarified}")

query_vector = embed_text(tokenize_text(clarified))
results = search(client, query_vector, QDRANT_TOP_K)

retrieved = [(res.id, res.payload["question"]) for res in results]
response_text = choose_best_match(clarified, retrieved)

match = re.fullmatch(r"\d+", response_text)
if match:
    best_stt = int(match.group())
    row = df[df["STT"] == best_stt].iloc[0]
    print(f"\n‚úÖ C√¢u ph√π h·ª£p nh·∫•t (STT {best_stt}): {row['C√¢u h·ªèi']}")
    print(f"üí° C√¢u tr·∫£ l·ªùi: {row['C√¢u tr·∫£ l·ªùi ']}")
else:
    print("ü§ñ T√¥i kh√¥ng c√≥ th√¥ng tin.")
